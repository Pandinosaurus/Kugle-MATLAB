% Write a header file containing struct definitions for the different elements in the ACADO array

function WriteArrayIndexFile(ts)
    global ACADO_;
     
    % Should generate the "acado_indices.h" file
    fid = fopen('acado_indices.h','wt'); % open for writing as text
    
    % Write header
    header = {'/* Copyright (C) 2018-2019 Thomas Jespersen, TKJ Electronics. All rights reserved.' ...
              ' *' ...
              ' * This program is free software: you can redistribute it and/or modify  ' ...
              ' * it under the terms of the GNU General Public License as published by  ' ...
              ' * the Free Software Foundation, version 3.' ...
              ' *' ...
              ' * This program is distributed in the hope that it will be useful, but ' ...
              ' * WITHOUT ANY WARRANTY; without even the implied warranty of ' ...
              ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU ' ...
              ' * General Public License for more details. ' ...
              ' *' ...
              ' * Contact information' ...
              ' * ------------------------------------------' ...
              ' * Thomas Jespersen, TKJ Electronics' ...
              ' * Web      :  http://www.tkjelectronics.dk' ...
              ' * e-mail   :  thomasj@tkjelectronics.dk' ...
              ' * ------------------------------------------' ...
              ' */' ...
              ' ' ...
              '#ifndef ACADO_INDICES_H' ...
              '#define ACADO_INDICES_H' ...
              '' ...
              '#include "acado_common.h"'};
      
    fprintf(fid, '%s\n', header{:});
    fprintf(fid, '\n');  
          
    % Write sampling time  
    fprintf(fid, '// ACADO Step size\n');
    fprintf(fid, '#define ACADO_TS %1.6f\n', ts);
    fprintf(fid, '\n');
    
    % Write differential states
    fprintf(fid, 'typedef struct x_t\n');
    fprintf(fid, '{\n');
    for (i = 1:length(ACADO_.helper.x))
        fprintf(fid, '	real_t %s;\n', ACADO_.helper.x{i}.name);
    end
    fprintf(fid, '} x_t __attribute__((packed));\n');
    fprintf(fid, '\n');
    
    % Write controls
    fprintf(fid, 'typedef struct u_t\n');
    fprintf(fid, '{\n');
    for (i = 1:length(ACADO_.helper.u))
        fprintf(fid, '	real_t %s;\n', ACADO_.helper.u{i}.name);
    end
    fprintf(fid, '} u_t __attribute__((packed));\n');
    fprintf(fid, '\n');    
    
    % Write online data
    fprintf(fid, 'typedef struct od_t\n');
    fprintf(fid, '{\n');
    for (i = 1:length(ACADO_.helper.od))
        fprintf(fid, '	real_t %s;\n', ACADO_.helper.od{i}.name);
    end
    fprintf(fid, '} od_t __attribute__((packed));\n');
    fprintf(fid, '\n');        
    
    % Write weighted states (from DefineWeightedStates)
    fprintf(fid, 'typedef struct y_t\n');
    fprintf(fid, '{\n');
    fprintf(fid, '	real_t %s;\n', ACADO_.y{:});    
    fprintf(fid, '} y_t __attribute__((packed));\n');
    fprintf(fid, '\n');         
    
    % Write weighted terminal states (from DefineWeightedTerminalStates)
    fprintf(fid, 'typedef struct yN_t\n');
    fprintf(fid, '{\n');    
    fprintf(fid, '	real_t %s;\n', ACADO_.yN{:});    
    fprintf(fid, '} yN_t __attribute__((packed));\n');
    fprintf(fid, '\n');         
        
    
    % Write ACADO struct
    ACADO_struct = {'typedef struct ACADO_t' ...
                    '{' ...
                    '	int dummy;' ...
                    '	x_t x[ACADO_N+1];' ...
                    '	u_t u[ACADO_N];' ...
                    '    od_t od[ACADO_N+1];' ...
                    '    y_t y[ACADO_N];' ...
                    '    yN_t yN;' ...
                    '    real_t W[ ACADO_NY*ACADO_NY ];' ...
                    '    real_t WN[ ACADO_NYN*ACADO_NYN ];' ...
                    '    x_t x0;' ...
                    '} ACADO_t __attribute__((packed));'};      
    fprintf(fid, '%s\n', ACADO_struct{:});
    fprintf(fid, '\n');  
    
    % Write footer
    fprintf(fid, '#endif /* ACADO_INDICES_H */');
    
    % Close file
    fclose(fid);
end